import java.awt.Color;
public class PhotoMagic{
    /** This method takes a picture and LFSR as input, applies an LFSR to encrypt it and returns a scrambled picture.
     * This is done by iterating through each pixel, isolating its r g and b values, and creating new r g and b
     * values by taking the xor of each of their values with 8-bit integers generated by our lfsr. This becomes the pixel's new colour
     * Applying the method to the scrambled picture will return the initial picture again.
     * @param picture is our initial picture
     * @param lfsr is our LFSR that we will use to encrypt the photo
     * @return the encrypted/decrypted picture */
    public static Picture transform (Picture picture, LFSR lfsr){
        int[][] redArray=new int[picture.width()][picture.height()];
        int[][] greenArray=new int[picture.width()][picture.height()];
        int[][] blueArray=new int[picture.width()][picture.height()];
        for (int i=0;i<picture.width();i++) {
            for (int j=0;j<picture.height();j++){

                redArray[i][j]=picture.get(i,j).getRed()^lfsr.generate(8);
                greenArray[i][j]=picture.get(i,j).getGreen()^lfsr.generate(8);
                blueArray[i][j]=picture.get(i,j).getBlue()^lfsr.generate(8);
                Color newColor=new Color(redArray[i][j],greenArray[i][j],blueArray[i][j]);
                picture.set(i,j,newColor);
            }
        }
        return picture;
    }
    //This calls our method on a picture after accepting an LFSR and then shows the new picture.
    public static void main(String[] args){
        Picture pic=new Picture(args[0]);
        LFSR lfsr=new LFSR(args[1],Integer.parseInt(args[2]));
        transform(pic,lfsr);
        pic.show();
    }
}
